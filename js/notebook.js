var Notebook = (function() {

    // Panel view
    
    var NotebookPanel = Backbone.View.extend({
        tagName: "article",
        
        initialize: function(opts, parent, sectionId, menuItemId) {
            this.parent = parent;
            var sectionSel = '#'+sectionId;
            var menuItemSel = '#'+menuItemId;
            this.section = this.$(sectionSel);
            this.menuItem = this.$(menuItemSel);
            
            var activeEvent = "click "+menuItemSel;
            var events = {};
            events[activeEvent] = "active";
            this.delegateEvents(events);
        },
        
        active: function() {
            if (this.parent) {
                this.parent.desactiveAllPage();
            }
            this.menuItem.addClass("active");
            this.section.addClass("active");
            return this;
        }
    });


    // Roles model
    
    var Role = Backbone.Model.extend({
        defaults: {
            name: "",
            figureUrl: "",
            sections: []
        }
    });

    // Figure
    
    var FigureView = Backbone.View.extend({
        tagName: "div",
        className: "figure",
        tpl: _.template('<img class="full-size-content animate" src="<%= figureUrl %>"/><p><%= name %></p>'),
        
        events: {
            "click" : "showDetail"
        },
    
        render: function() {
            this.$el.html( this.tpl({figureUrl: this.model.get("figureUrl"), 
                                     name: this.model.get("name")}) );
            return this;
        },
        
        showDetail: function() {
            var detailView = new RoleDetailView({model: this.model}).render();
            window.Notebook.rolesPanel.showDetailPage(detailView);
            return this;
        }
    });
    
    // Roles panel
    
    var RolesPanel = NotebookPanel.extend({
        initialize: function() {
            NotebookPanel.prototype.initialize.apply(this, arguments);
            
            if (this.collection) {
                var section = this.section.empty();
                var count = 0;
                this.collection.each(function(model) {
                    var view = new FigureView({model: model}).render();
                    section.append(view.$el);
                    if (count >= 8) {
                        view.$el.addClass("page2item");
                    }
                    count ++;
                });
            }
            section.append("<div class='page2'></div>");
        },
        
        showDetailPage: function(view) {
            this.section.children(".page2").empty().append(view.$el);
            return this;
        }
    });
    
    var RoleDetailView = Backbone.View.extend({
        tagName: "article",
        className: "role_detail",
        tpl: _.template('<header><img class="figure" src="<%= figureUrl %>"/><h1><%= name %></h1></header><% _.each(sections, function(section) { %> <section><%= section %></section> <% }); %>'),
        
        render: function() {
            this.$el.html( this.tpl( this.model.toJSON() ) );
            return this;
        }
    });
    
    
    
    
    
    // Intro view
    
    var IntroPanel = NotebookPanel.extend({
        initialize: function() {
            NotebookPanel.prototype.initialize.apply(this, arguments);
        }
    });
    
    
    
    
    
    // Word Model
    
    var Word = Backbone.Model.extend({
        defaults: {
            word: "",
            category: "",
            genre: "",
            definitions: [],
            extraInfos: {},
            synonymes: [],
            links: {},
            lock: true
        }
    });
    
    // Word view
    
    var WordView = Backbone.View.extend({
        tagName: "p",
        className: "word",
        tpl: _.template('<%= word %>'),
        
        events: {
            "click" : "showDetail"
        },
        
        initialize: function() {
            this.listenTo(this.model, "change:lock", this.render);
        },
    
        render: function() {
            if (this.model.get("lock")) 
                this.$el.addClass("lock");
            else this.$el.removeClass("lock");
            this.$el.html( this.tpl({word: this.model.get("word")}) );
            return this;
        },
        
        showDetail: function() {
            if (!this.model.get("lock")) {
                var detailView = new WordDetailView({model: this.model}).render();
                window.Notebook.dictionaryPanel.showDetailPage(detailView);
            }
            
            return this;
        }
    });
    
    var WordDetailView = Backbone.View.extend({
        tagName: "article",
        className: "word_detail",
        tpl: _.template('<header><h1><%= word %></h1><h5><%= category %><% if(genre) print(", "+genre); %></h5></header><h2>DÃ©finitions</h2><section class="definitions"><% _.each(definitions, function(definition) { %> <p> - <%= definition %></p> <% }); %></section><% for(var key in extraInfos) { %> <section class="extraInfo"><h2><%= key %></h2><%= extraInfos[key] %></section> <% } %><% if(!_.isEmpty(links)) { %><h2>Liens externes</h2><section class="links"><% for(var key in links) { %> <p><a href="<%= links[key] %>" target="_blank"><%= key %></a></p> <% } %></section><% } %>'),
        
        render: function() {
            this.$el.html( this.tpl( this.model.toJSON() ) );
            return this;
        }
    });
    
    // Dictionary view
    
    var DictionaryPanel = NotebookPanel.extend({
        initialize: function() {
            NotebookPanel.prototype.initialize.apply(this, arguments);
            
            this.wordViews = {};
            
            var section = this.section.empty(), wordViews = this.wordViews;
            if (this.collection) {
                this.collection.comparator = this.comparator;
                this.collection.sort_key = "word";
                this.collection.sort();
                this.collection.each(function(model) {
                    var view = new WordView({model: model}).render();
                    wordViews[model.get("word")] = view;
                    section.append(view.$el);
                });
            }
            section.append("<div class='page2'></div>");
        },
        comparator: function(a, b) {
            // Assuming that the sort_key values can be compared with '>' and '<',
            // modifying this to account for extra processing on the sort_key model
            // attributes is fairly straight forward.
            a = a.get(this.sort_key);
            b = b.get(this.sort_key);
            return a > b ?  1
                 : a < b ? -1
                 :          0;
        },
        
        unlockWord: function(word) {
            var word_m = this.collection.findWhere({"word": word});
            if(word_m) 
                word_m.set("lock", false);
            return this;
        },
        
        showDefinition: function(word) {
            if (this.wordViews[word]) {
                this.wordViews[word].showDetail();
            }
            return this;
        },
        
        showDetailPage: function(view) {
            this.section.children(".page2").empty().append(view.$el);
            return this;
        }
    });
    
    
    
    
    
    // Credit view
    
    var CreditPanel = NotebookPanel.extend({
        initialize: function() {
            NotebookPanel.prototype.initialize.apply(this, arguments);
        }
    });
    
    
    // Root view
    
    var NotebookView = Backbone.View.extend({
        tagName: "article",
        
        events: {
            "click #nb_close": "hide",
            "click #nb_page_close": "hideDetail"
        },
        
        initialize: function() {
            this.menuItems = this.$("nav ul li");
            this.sections = this.$("#nb_pages section");
            this.detailPage = this.$("#nb_onepage");
        },
        
        desactiveAllPage: function() {
            this.menuItems.removeClass("active");
            this.sections.removeClass("active");
            
            return this;
        },
        
        showDetail: function(view) {
            this.detailPage.children("article").replaceWith(view.$el);
            this.detailPage.removeClass("hidden").addClass("show");
        },
        
        hideDetail: function() {
            this.detailPage.removeClass("show").addClass("hidden");
        },
        
        show: function() {
            this.$el.removeClass("hidden").addClass("show");
        },
        
        hide: function() {
            this.$el.removeClass("show").addClass("hidden");
            this.hideDetail();
        }
    });
    
    return {
        inited: false,
        
        initPanel: function(notebookJQ, roles, words) {
            this.book = new NotebookView({el: notebookJQ});
            
            this.introPanel = new IntroPanel({el: notebookJQ}, this.book, "nb_intro", "nb_intro_tab");
            
            var rolemodels = new Backbone.Collection(roles, {model: Role});
            var wordmodels = new Backbone.Collection(words, {model: Word});
            
            
            this.rolesPanel = new RolesPanel({
                                                el: notebookJQ,
                                                collection: rolemodels
                                             }, 
                                             this.book, 
                                             "nb_roles", 
                                             "nb_roles_tab");
                                             
            this.dictionaryPanel = new DictionaryPanel( {
                                                            el: notebookJQ,
                                                            collection: wordmodels
                                                        }, 
                                                        this.book, 
                                                        "nb_dictionary", 
                                                        "nb_dictionary_tab");
            
            this.creditPanel = new CreditPanel({el: notebookJQ}, this.book, "nb_credit", "nb_credit_tab");
            
            this.detailPage = new Backbone.View({tagName: "article", el: notebookJQ.children("nb_onepage")});
            
            this.rolesPanel.active();
            this.inited = true;
        },
        
        isPanelOpen: function() {
            if (this.inited) {
                if (this.book.$el.hasClass("show")) {
                    return true;
                }
            }
            return false;
        },
        
        showPanel: function(subPanel) {
            if (this.inited) {
                this.book.show();
                
                switch (subPanel) {
                case "Dictionary":
                    this.dictionaryPanel.active();
                    break;
                case "Credit":
                    this.creditPanel.active();
                    break;
                case "Intro":
                    this.introPanel.active();
                    break;
                case "Roles": default:
                    this.rolesPanel.active();
                    break;
                }
            }
        },
        
        hidePanel: function() {
            if (this.inited) {
                this.book.hide();
            }
        },
        
        unlockAndShowDefinition: function(word) {
            if (this.inited) {
                Badge.pullUpFlag("CollectOneWiki");
                this.dictionaryPanel.unlockWord(word).showDefinition(word);
                this.showPanel("Dictionary");
            }
        },
        
        showDetailPage: function(view) {
            if (this.inited) {
                this.book.showDetail(view);
            }
        }
    };
})();




var roles = [
    {
        name: "SIMON",
        figureUrl: "./img/simon.png",
        sections: ["<p>Il vient de sâeÌchapper de son foyer.<br/>Il nâa quâun seul ami, Dark Vador, son rat albinos.</p>", "<h2>CaracteÌristiques:</h2><p>Il ne se laisse pas faire.</p>"]
    },
    {
        name: "DARK VADOR",
        figureUrl: "./img/dark.png",
        sections: ["<p>Le seul ami de Simon</p>", "<h2>CaracteÌristiques:</h2><p>Câest un rat albinos<br/>Il attaque et mord sur ordre de Simon</p>"]
    },
    {
        name: "LA MEUTE",
        figureUrl: "./img/lameute.png",
        sections: ["<p>Quatre adolescents qui font reÌgner leur loi au sein du foyer.</p>", "<h2>CaracteÌristiques:</h2><p>Ils passent aÌ tabac ceux qui refusent de se soumettre.</p>"]
    },
    {
        name: "KEVIN",
        figureUrl: "./img/kevin.png",
        sections: ["<p>Le chef de la Meute</p>", "<h2>CaracteÌristiques:</h2><p>Sans pitieÌ</p>"]
    },
    {
        name: "LA FOUINE",
        figureUrl: "./img/fouine.png",
        sections: ["<p>17 ans<br/>Il fait partie de la Meute</p>", "<h2>CaracteÌristiques:</h2><p>1m80, 75kg<br/>Violent</p>"]
    },
    {
        name: "OURS",
        figureUrl: "./img/ours.png",
        sections: ["<p>16 ans<br/>Il fait partie de la Meute</p>", "<h2>CaracteÌristiques:</h2><p>Le pas lourd<br/>BeÌte: il a un QI inversement proportionnel aÌ son poids</p>"]
    },
    {
        name: "?",
        figureUrl: "./img/4th.png",
        sections: ["<p>Il fait partie de la Meute</p>"]
    },
    {
        name: "DIOGENE",
        figureUrl: "./img/diogene.png",
        sections: ["<p>Un SDF qui vit dans un amas de cartons</p>", "<h2>CaracteÌristiques:</h2><p>Ressemble au philosophe DiogeÌne.<br/>Puissant<br/>Visage bienveillant<br/>Voix rassurante</p>"]
    }
];


var words = [
    {
        word: "Cyclope",
        category: "Nom",
        genre: "masculin",
        definitions: ["Les cyclopes sont des crÃ©atures fantastiques de la mythologie grecque. Ce sont des gÃ©ants qui ne possÃ¨dent quâun seul Åil au milieu du front. Ils Ã©taient soit forgerons, bÃ¢tisseurs ou pasteurs."],
        extraInfos: {
            "PolyphÃ¨me": "<img src='./img/src8.png'/><p class='caption'>PolyphÃ¨me, fils de PosÃ©Ã¯don</p>",
            "Un Cyclope chez les X-Men": "<p>Cyclope est aussi un super-hÃ©ros crÃ©Ã© par J. Kirby et S. Lee en 1963. Câest  un mutant qui gÃ©nÃ¨re des rayons extrÃªmement puissants avec ses yeux mais il Ã©vite au maximum dâutiliser la violence.</p><img src='./img/src9.jpeg'/><p class='caption'>Cyclope, super-hÃ©ros des X-Men</p>"
        },
        synonymes: [],
        links: {
            "WikipÃ©dia X-Men": "http://fr.wikipedia.org/wiki/Cyclope_%28comics%29"
        }
    },
    {
        word: "Hallali",
        category: "Nom",
        genre: "masculin",
        definitions: ["Sonnerie de chasse Ã  courre qui annonce la prise imminente de lâanimal, dâoÃ¹ lâexpressionÂ :Â Sonner lâhallaliÂ : annoncer la dÃ©faite de quelquâun.", "Moment oÃ¹ lâanimal est pris.", "Par extensionÂ : dÃ©bÃ¢cle, dÃ©faite"],
        extraInfos: {
            "Interjection": "Cri du chasseur qui attrape du gibier lors dâune chasse Ã  courre.",
            "L'hallali du cerf": "<img src='./img/src22.jpeg'/><p class='caption'>Peint par Courbet en 1867</p>"
        },
        links: {"WikipÃ©dia Cyclope": "http://fr.wikipedia.org/wiki/Cyclope"}
    },
    {
        word: "La Petite Ceinture",
        category: "Lieu",
        definitions: ["Câest une ancienne ligne de chemin de fer longue de 32 km qui faisait le tour de Paris."],
        extraInfos: {
            "Vue depuis la place Wagram": "<img src='./img/src32.jpeg'/><p class='caption'>Photographie de marsupilami92</p>",
            "BiodiversitÃ©": "Elle est considÃ©rÃ©e comme une rÃ©serve de biodiversitÃ©. On peut y observer de nombreuses variÃ©tÃ©s dâarbres, de plantes et la plus grande colonie de chauve-souris de lâespÃ¨ce pipistrelle dâIle de France.<br/>La ville de Paris y amÃ©nage des parcours pÃ©dagogiques, proposant ainsi un nouveau type de promenade nature Ã  Paris.",
            "La Petite Ceinture traverse le Parc Montsouris": "<img src='./img/src33.jpeg'/><p class='caption'>Photo de Thomas Claveirole</p>"
        },
        links: {
            "Lien WikipÃ©dia": "http://fr.wikipedia.org/wiki/Ligne_de_Petite_Ceinture",
            "Lien Mairie de Paris": "http://www.paris.fr/loisirs/se-promener-a-paris/balades-au-vert/decouvrir-les-richesses-de-la-petite-ceinture/rub_9660_stand_53584_port_23803"
        }
    },
    {
        word: "Albinos",
        category: "Adjectif",
        genre: "invariable",
        definitions: ["Qui est affectÃ© d'albinisme."],
        extraInfos: {
            "Albinisme": "Nom, Masculin<br/>Maladie gÃ©nÃ©tique qui se caractÃ©rise par une absence du pigment destinÃ© Ã  colorer la peau, les poils, les cheveux ainsi que par des yeux rouges. Elle affecte les humains ou les animaux.",
            "Rat albinos": "<img src='./img/src30.jpeg'/><p class='caption'>Photographie de Tambako</p>",
            "Les albinos cÃ©lÃ¨bres": "Il existe des albinos cÃ©lÃ¨bres parmi lesquels Salif KeÃ¯ta, chanteur et musicien malien. Il a obtenu une Victoire de la musique en 2010 pour son album Â«Â La DiffÃ©renceÂ Â»<img src='./img/src31.jpeg'/><p class='caption'>Salif KeÃ¯ta par Jeff Attaway</p>"
        },
        links: {
            "WikipÃ©dia albinos": "http://fr.wikipedia.org/wiki/Albinisme",
            "Site officielÂ de Salif KeÃ¯ta": "http://salif-keita.artiste.universalmusic.fr/"
        }
    },
    {
        word: "Frondaison",
        category: "Nom",
        genre: "fÃ©minin",
        definitions: ["Les feuilles et les branches dâun arbre.", "Epoque oÃ¹ les feuilles commencent Ã  pousser."],
        extraInfos: {
            "Photo de la frondaison": "<img src='./img/src29.jpeg'/><p class='caption'>Photo rÃ©alisÃ©e par Panoramas</p>"
        },
        synonymes: ["Feuillage", "Ramure", "Branchage"]
    },
    {
        word: "Noctambule",
        category: "Nom",
        genre: "masculin ou fÃ©minin",
        definitions: ["Personne ou animal qui a lâhabitude de se promener la nuit.", "Personne qui aime faire la fÃªte la nuit.", "Par extensionÂ : personne qui est en activitÃ© la nuit."],
        extraInfos: {
            "A moins dâinventer": " - NyctambuleÂ : qui recherche les fÃ©tards Ã©garÃ©s la nuit<br/> - NoctalopeÂ : qui travaille la nuit sans avoir besoin de lumiÃ¨re",
            "Nyctalope": "A ne pas confondre avec nyctalope : un adjectif qui dÃ©signe celui qui a la facultÃ© de voir dans la pÃ©nombre, comme les chats"
        },
        synonymes: ["Feuillage", "Ramure", "Branchage"]
    }
];


// Initialization

$(document).ready(function() {

    Notebook.initPanel($("#ui_notebook"), roles, words);
});